üìö –ó–∞–¥–∞—á–∞ 1–∞

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è.

#include <iostream>

void check_password() {
    int correct_password = 1234; // –í–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
    int entered_password;

    std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ";
    std::cin >> entered_password;

    if (entered_password == correct_password) {
        std::cout << "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π!" << std::endl;
    } else {
        std::cout << "–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π!" << std::endl;
    }
}

int main() {
    check_password();
    return 0;
}


üìö –ó–∞–¥–∞—á–∞ 16

–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

#include <iostream>
#include <string>

void check_login_password() {
    std::string username1 = "user1";
    std::string password1 = "pass1";
    std::string username2 = "user2";
    std::string password2 = "pass2";

    std::string entered_username, entered_password;

    std::cout << "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ";
    std::cin >> entered_username;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ";
    std::cin >> entered_password;

    if ((entered_username == username1 && entered_password == password1) ||
        (entered_username == username2 && entered_password == password2)) {
        std::cout << "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!" << std::endl;
    } else {
        std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!" << std::endl;
    }
}

int main() {
    check_login_password();
    return 0;
}


üìö –ó–∞–¥–∞—á–∞ 1–≤

–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç—Ä—ë—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è.

#include <iostream>
#include <string>

void check_login_password_with_attempts() {
    std::string username1 = "user1";
    std::string password1 = "pass1";
    std::string username2 = "user2";
    std::string password2 = "pass2";

    std::string entered_username, entered_password;
    int attempts = 3;

    while (attempts > 0) {
        std::cout << "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ";
        std::cin >> entered_username;
        std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ";
        std::cin >> entered_password;

        if ((entered_username == username1 && entered_password == password1) ||
            (entered_username == username2 && entered_password == password2)) {
            std::cout << "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!" << std::endl;
            return;
        } else {
            attempts--;
            std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: " << attempts << std::endl;
        }
    }

    std::cout << "–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞." << std::endl;
}

int main() {
    check_login_password_with_attempts();
    return 0;
}


üìö –ó–∞–¥–∞—á–∞ 2

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–æ–≤.

#include <iostream>

void find_max_number() {
    int count, number;
    int max_number;

    std::cout << "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª: ";
    std::cin >> count;

    if (count <= 0) {
        std::cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0." << std::endl;
        return;
    }

    std::cout << "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞: ";
    std::cin >> max_number; // –°—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ

    for (int i = 1; i < count; ++i) {
        std::cin >> number;
        if (number > max_number) {
            max_number = number;
        }
    }

    std::cout << "–ù–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ: " << max_number << std::endl;
}

int main() {
    find_max_number();
    return 0;
}


üìö –ó–∞–¥–∞—á–∞ 3

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞, –≤–≤–æ–¥–∏–º–æ–≥–æ –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω—É–ª—è.

#include <iostream>

void find_max_number_until_zero() {
    int number;
    int max_number; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞

    std::cout << "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ 0): ";

    // –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
    std::cin >> number;

    if (number == 0) {
        std::cout << "–ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞." << std::endl;
        return;
    }

    max_number = number; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–µ—Ä–≤—ã–º –≤–≤–µ–¥–µ–Ω–Ω—ã–º

    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–≤–æ–¥–∏—Ç—å –ø–æ–∫–∞ –Ω–µ –≤–≤–µ–¥—ë–º 0
    while (number != 0) {
        if (number > max_number) {
            max_number = number;
        }
        std::cin >> number;
    }

    std::cout << "–ù–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ: " << max_number << std::endl;
}

int main() {
    find_max_number_until_zero();
    return 0;
}
